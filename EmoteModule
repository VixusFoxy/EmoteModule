/*
 
 /$$                           /$$$$$$$                             /$$$$$$$$                  /$$            
| $$                          | $$__  $$                           |__  $$__/                 | $$            
| $$        /$$$$$$  /$$   /$$| $$  \ $$  /$$$$$$   /$$$$$$   /$$$$$$$| $$  /$$$$$$   /$$$$$$$| $$$$$$$       
| $$       /$$__  $$|  $$ /$$/| $$  | $$ /$$__  $$ /$$__  $$ /$$_____/| $$ /$$__  $$ /$$_____/| $$__  $$      
| $$      | $$$$$$$$ \  $$$$/ | $$  | $$| $$  \ $$| $$$$$$$$|  $$$$$$ | $$| $$$$$$$$| $$      | $$  \ $$      
| $$      | $$_____/  >$$  $$ | $$  | $$| $$  | $$| $$_____/ \____  $$| $$| $$_____/| $$      | $$  | $$      
| $$$$$$$$|  $$$$$$$ /$$/\  $$| $$$$$$$/|  $$$$$$/|  $$$$$$$ /$$$$$$$/| $$|  $$$$$$$|  $$$$$$$| $$  | $$      
|________/ \_______/|__/  \__/|_______/  \______/  \_______/|_______/ |__/ \_______/ \_______/|__/  |__/      

   Copyright 2020 - Lexis Valentine

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
                                                                                                              
*/                                                                                                             
                                                       
#include <EEPROM.h>               // EEPROM to remember emote state
#include <Adafruit_DotStar.h>     // DotStar library for sake of simplicity
#include <avr/power.h>            // Power management if needed

#define NUMPIXELS  64             // Number of LEDs in strip. it's an 8x8 grid, so, 64.
#define DATAPIN    A4             // Can be changed to any pin you desire
#define CLOCKPIN   A5             // Ditto

Adafruit_DotStar strip(NUMPIXELS, DATAPIN, CLOCKPIN, DOTSTAR_BRG); // Set up the extension

int emote = 0;                    // Initialise the emote counter
boolean IsText = 0;               // Is this text or not? This is how to tell
boolean thisState = 0;            // declare thisState and set to zero
char TextHandle[100];             // Increase past 100 if desired. Fills with text from strings below.
int TextHandleSize = 0;           // Count how many elements are in a string for text handling.
boolean brokenloop = 0;           // On button press, break an animation loop

void setup() {
  pinMode(2, INPUT_PULLUP);       // Enable input on Pin D2 and use internal pullup
  emote = EEPROM.read(1);         // EEPROM on boot      
  strip.begin();                  // Initialize pins for output
  strip.clear();                  // Turn all LEDs off to clear garbage data from boot

// TESTING CODE
  int loopcount = 0;              // How many times have we done this?
  int      head  = 0, tail = -64; // Index of first 'on' and 'off' pixels
  uint32_t color = 0x111111;      // Set color for test sequence. DO NOT MAKE IT BRIGHTER THAN THIS!!!!!
  
  while(true) {
    strip.setPixelColor(head, color); // 'On' pixel at head
    strip.setPixelColor(tail, 0);     // 'Off' pixel at tail
    strip.show();                     // Refresh strip
    delay(20);                        // Tiny delay. Make slower if you suspect a bad pixel.
    if(++head >= NUMPIXELS) {         // Increment head index.
      head = 0;                       // Used if you want to make a little snake instead of fill the whole screen
    }
    if(++tail >= NUMPIXELS) tail = 0; // Increment, reset tail index
    loopcount++;                      // Increment loop counter
    if (loopcount > 63) {             // Break the loop!
      delay(1500);
      strip.fill(0x000000, 0, 64);    // Clear the screen!
      strip.show();
      delay(500);
      break;                          // Did it work? Hooray! Break look as we're done testing.
    }
  }
// TESTING CODE
}

uint32_t color = 0x000000;      // Initialising the color variable.
boolean tested = 0;             // Have we tested the matrix? Displays a little "OK" if not, then sets to true.

// NOTE: Due to some programming weirdness the matricies are MIRRORED HORIZONTALLY from how they appear in the matrix below.

const uint8_t PROGMEM StatusOK[] =   {0, 0, 0, 0, 0, 0, 0, 0,  // All OK? For the testing thing!
                                      0, 0, 1, 0, 1, 1, 1, 1,
                                      1, 0, 1, 0, 1, 0, 0, 1,
                                      0, 1, 1, 0, 1, 0, 0, 1,
                                      0, 0, 1, 0, 1, 0, 0, 1,
                                      0, 1, 1, 0, 1, 0, 0, 1,
                                      1, 0, 1, 0, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };

// Test pattern is above.

/*

AAAAA   L       PPPPPP  H    H   AAAAA   BBBBB   EEEEE  TTTTTTT  !!
A   A   L       P    P  H    H   A   A   B    B  E         T     !!
AAAAA   L       PPPPPP  HHHHHH   AAAAA   BBBBB   EEEEE     T     !!
A   A   L       P       H    H   A   A   B    B  E         T      
A   A   LLLLLL  P       H    H   A   A   BBBBB   EEEEE     T     !!

*/
const uint8_t PROGMEM LetterA[] =    {0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterB[] =    {0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      };

const uint8_t PROGMEM LetterC[] =    {1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterD[] =    {0, 0, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 1, 1, 1, 1, 1, 1,
                                      };

const uint8_t PROGMEM LetterE[] =    {1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterF[] =    {1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      };

const uint8_t PROGMEM LetterG[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 0, 0, 1, 1,
                                      1, 1, 1, 1, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };
                                      
const uint8_t PROGMEM LetterH[] =    {0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      };
                                      
const uint8_t PROGMEM LetterI[] =    {0, 0, 0, 0, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 0, 0, 0, 0,
                                      };

const uint8_t PROGMEM LetterJ[] =    {0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 1, 1,
                                      0, 0, 0, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 1, 1, 1, 0,
                                      };

const uint8_t PROGMEM LetterK[] =    {1, 1, 1, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 0, 0, 1, 1,
                                      0, 0, 1, 1, 1, 0, 1, 1,
                                      0, 0, 0, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 1, 1, 1, 1,
                                      0, 0, 1, 1, 1, 0, 1, 1,
                                      0, 1, 1, 1, 0, 0, 1, 1,
                                      1, 1, 1, 0, 0, 0, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterL[] =    {0, 0, 0, 0, 0, 0, 0, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };

const uint8_t PROGMEM LetterM[] =    {1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 0, 0, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterN[] =    {0, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 1, 1, 1,
                                      1, 1, 0, 0, 1, 1, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 1, 1, 0, 0, 1, 1,
                                      1, 1, 1, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 0,
                                      };
                                      
const uint8_t PROGMEM LetterO[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };
                                      
const uint8_t PROGMEM LetterP[] =    {0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      };

const uint8_t PROGMEM LetterQ[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };
                                      
const uint8_t PROGMEM LetterR[] =    {0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      };

const uint8_t PROGMEM LetterS[] =    {0, 1, 1, 1, 1, 1, 0, 0,
                                      1, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 0, 0, 0, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 0, 0,
                                      0, 1, 1, 0, 0, 0, 0, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterT[] =    {1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };

const uint8_t PROGMEM LetterU[] =    {0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };
                                      
const uint8_t PROGMEM LetterV[] =    {1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };

const uint8_t PROGMEM LetterW[] =    {0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };

const uint8_t PROGMEM LetterX[] =    {1, 1, 0, 0, 0, 0, 0, 1,
                                      0, 1, 1, 0, 0, 0, 1, 1,
                                      0, 0, 1, 1, 0, 1, 1, 0,
                                      0, 0, 0, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 0, 0, 0,
                                      0, 1, 1, 0, 1, 1, 0, 0,
                                      1, 1, 0, 0, 0, 1, 1, 0,
                                      1, 0, 0, 0, 0, 0, 1, 1,
                                      };
                                      
const uint8_t PROGMEM LetterY[] =    {1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };

const uint8_t PROGMEM LetterZ[] =    {1, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 0, 0, 0, 0, 0,
                                      0, 0, 1, 1, 0, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 0, 1, 1, 0, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };



const uint8_t PROGMEM Letter1[] =    {0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };

const uint8_t PROGMEM Letter2[] =    {0, 0, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 0, 0,
                                      1, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 0, 0, 0, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };

const uint8_t PROGMEM Letter3[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 0, 0, 0,
                                      0, 1, 1, 1, 1, 0, 0, 0,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };

const uint8_t PROGMEM Letter4[] =    {1, 0, 0, 0, 0, 0, 1, 0,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 0, 0, 0, 0, 0, 0,
                                      1, 1, 0, 0, 0, 0, 0, 0,
                                      1, 1, 0, 0, 0, 0, 0, 0,
                                      };

const uint8_t PROGMEM Letter5[] =    {0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 0, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 1, 1, 1, 1, 1, 0,
                                      };

const uint8_t PROGMEM Letter6[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };

const uint8_t PROGMEM Letter7[] =    {1, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 0, 0, 0, 0, 0,
                                      0, 1, 1, 1, 0, 0, 0, 0,
                                      0, 0, 1, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 1, 0, 0,
                                      0, 0, 0, 0, 1, 1, 1, 0,
                                      0, 0, 0, 0, 0, 1, 1, 1,
                                      };

const uint8_t PROGMEM Letter8[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };

const uint8_t PROGMEM Letter9[] =    {0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 0, 0, 0, 0, 0, 0,
                                      1, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      };

const uint8_t PROGMEM Letter0[] =    {0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 0, 0, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      };

const uint8_t PROGMEM Blank[] =      {0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };


//Alphabet and numbers are above

/*

EEEEE  M     M  OOOOO TTTTTTT EEEEE SSSSSS   !!
E      MMM MMM  O   O    T    E     S        !!
EEEEE  M  M  M  O   O    T    EEEEE SSSSSS   !!
E      M     M  O   O    T    E          S
EEEEE  M     M  OOOOO    T    EEEEE SSSSSS   !!
 
*/



const uint8_t PROGMEM TransFlag[] =  {0, 0, 0, 0, 0, 0, 0, 0,  // TRANSFLAG
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      2, 2, 2, 2, 2, 2, 2, 2,
                                      3, 3, 3, 3, 3, 3, 3, 3,
                                      3, 3, 3, 3, 3, 3, 3, 3,
                                      2, 2, 2, 2, 2, 2, 2, 2,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM BatLowest[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // BATLOWEST
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 0, 0, 0, 0, 2, 1,
                                      1, 1, 0, 0, 0, 0, 2, 1,
                                      1, 1, 0, 0, 0, 0, 2, 1,
                                      0, 1, 0, 0, 0, 0, 2, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM BatLow[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // BATLOW
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 0, 0, 0, 2, 2, 1,
                                      1, 1, 0, 0, 0, 2, 2, 1,
                                      1, 1, 0, 0, 0, 2, 2, 1,
                                      0, 1, 0, 0, 0, 2, 2, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM BatMid[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // BATMID
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 0, 0, 2, 2, 2, 1,
                                      1, 1, 0, 0, 2, 2, 2, 1,
                                      1, 1, 0, 0, 2, 2, 2, 1,
                                      0, 1, 0, 0, 2, 2, 2, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM BatHigh[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // BATHIGH
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 0, 2, 2, 2, 2, 1,
                                      1, 1, 0, 2, 2, 2, 2, 1,
                                      1, 1, 0, 2, 2, 2, 2, 1,
                                      0, 1, 0, 2, 2, 2, 2, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM BatFull[] =    {0, 0, 0, 0, 0, 0, 0, 0,  // BATFULL
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 2, 2, 2, 2, 2, 1,
                                      1, 1, 2, 2, 2, 2, 2, 1,
                                      1, 1, 2, 2, 2, 2, 2, 1,
                                      0, 1, 2, 2, 2, 2, 2, 1,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM PrideFlag[] =  {0, 0, 0, 0, 0, 0, 0, 0,  // PRIDEFLAG
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      2, 2, 2, 2, 2, 2, 2, 2,
                                      3, 3, 3, 3, 3, 3, 3, 3,
                                      4, 4, 4, 4, 4, 4, 4, 4,
                                      5, 5, 5, 5, 5, 5, 5, 5,
                                      6, 6, 6, 6, 6, 6, 6, 6,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM Droplet[] =    {0, 0, 0, 1, 1, 0, 0, 0,  // DROPLET
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 2, 1, 0,
                                      0, 1, 1, 1, 2, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      };
const uint8_t PROGMEM Grin[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // GRIN
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 0, 1, 0, 0, 1, 0, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };
const uint8_t PROGMEM Heart[] =      {0, 1, 1, 0, 0, 1, 1, 0,  // HEART
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };
                                      
const uint8_t PROGMEM HiThere[] =      {1, 1, 1, 0, 1, 0, 0, 1,  // HITHERE
                                      0, 1, 0, 0, 1, 0, 0, 1,
                                      0, 1, 0, 0, 1, 0, 0, 1,
                                      0, 1, 0, 0, 1, 1, 1, 1,
                                      0, 1, 0, 0, 1, 1, 1, 1,
                                      0, 1, 0, 0, 1, 0, 0, 1,
                                      0, 1, 0, 0, 1, 0, 0, 1,
                                      1, 1, 1, 0, 1, 0, 0, 1,
                                      };
const uint8_t PROGMEM Power[] =      {0, 0, 0, 1, 1, 0, 0, 0,  // POWER
                                      0, 1, 0, 1, 1, 0, 1, 0,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      };
const uint8_t PROGMEM Question[] =      {1, 1, 1, 1, 1, 1, 1, 1,  // QUESTION
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 0, 0, 0, 0, 1, 1,
                                      1, 1, 1, 1, 1, 0, 0, 0,
                                      1, 1, 1, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };
const uint8_t PROGMEM OhOh[] =      {0, 1, 0, 0, 0, 0, 1, 0,  // OHOH
                                      1, 0, 1, 0, 0, 1, 0, 1,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };
const uint8_t PROGMEM Ghost[] =      {0, 0, 1, 1, 1, 0, 0, 0,  // GHOST
                                      0, 1, 1, 1, 1, 1, 0, 0,
                                      1, 0, 1, 0, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 0, 0, 1,
                                      1, 2, 2, 1, 1, 1, 0, 1,
                                      1, 2, 2, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 0, 0, 0,
                                      };
const uint8_t PROGMEM Smile[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // SMILE
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 0, 1, 0, 0, 1, 0, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      1, 0, 0, 0, 0, 0, 0, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM LowSmile[] =   {0, 0, 0, 0, 0, 0, 0, 0,  // LOWSMILE
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      1, 0, 0, 0, 0, 0, 0, 1,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM Padlock[] =    {0, 2, 2, 2, 2, 2, 2, 0,  // PADLOCK
                                      0, 2, 2, 2, 2, 2, 2, 0,
                                      0, 2, 2, 0, 0, 2, 2, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };
const uint8_t PROGMEM XEyes[] =      {0, 0, 0, 0, 0, 0, 0, 0,  // XEYES
                                      1, 0, 1, 0, 0, 1, 0, 1,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 0, 1, 0, 0, 1, 0, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM Exclaim[] =    {0, 0, 0, 1, 1, 0, 0, 0,  // EXCLAIM
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      };
const uint8_t PROGMEM SadFace[] =    {0, 0, 0, 0, 0, 0, 0, 0,  // SADFACE
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      1, 0, 0, 0, 0, 0, 0, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 0, 0, 0, 0, 0, 0, 0,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 0, 0, 0, 0, 0, 0, 1,
                                      };
const uint8_t PROGMEM PacMan[] =     {0, 0, 1, 1, 1, 1, 0, 0,  // PACMAN
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 0, 1, 1, 1, 1, 1,
                                      0, 0, 0, 0, 1, 1, 1, 1,
                                      0, 0, 0, 1, 1, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      };
const uint8_t PROGMEM PokeBall[] =   {0, 0, 2, 2, 2, 2, 0, 0,  // POKEBALL
                                      0, 2, 2, 2, 2, 2, 2, 0,
                                      2, 2, 2, 2, 2, 2, 2, 2,
                                      2, 2, 2, 0, 0, 2, 2, 2,
                                      0, 0, 0, 1, 1, 0, 0, 0,
                                      1, 1, 1, 0, 0, 1, 1, 1,
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      };
const uint8_t PROGMEM Flower[] =     {0, 0, 0, 0, 0, 1, 0, 0,  // FLOWER
                                      0, 0, 0, 0, 1, 2, 1, 0,
                                      0, 0, 0, 0, 3, 1, 0, 0,
                                      0, 0, 0, 3, 3, 0, 0, 0,
                                      0, 0, 0, 3, 0, 0, 0, 0,
                                      0, 4, 4, 4, 4, 4, 0, 0,
                                      0, 0, 4, 4, 4, 0, 0, 0,
                                      0, 0, 4, 4, 4, 0, 0, 0,
                                      };
const uint8_t PROGMEM Spiral[] =     {1, 1, 1, 1, 1, 1, 1, 1,  // SPIRAL
                                      0, 0, 0, 0, 0, 0, 0, 1,
                                      1, 1, 1, 1, 1, 1, 0, 1,
                                      1, 0, 0, 0, 0, 1, 0, 1,
                                      1, 0, 1, 0, 0, 1, 0, 1,
                                      1, 0, 1, 1, 1, 1, 0, 1,
                                      1, 0, 0, 0, 0, 0, 0, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      };
const uint8_t PROGMEM Rainbow[] =    {0, 0, 1, 1, 1, 1, 0, 0,  // RAINBOW
                                      0, 1, 2, 2, 2, 2, 1, 0,
                                      1, 2, 3, 3, 3, 3, 2, 1,
                                      2, 3, 4, 4, 4, 4, 3, 2,
                                      3, 4, 5, 5, 5, 5, 4, 3,
                                      4, 5, 6, 6, 6, 6, 5, 4,
                                      5, 6, 0, 0, 0, 0, 6, 5,
                                      6, 0, 0, 0, 0, 0, 0, 6,
                                      };
const uint8_t PROGMEM Invader[] =    {1, 0, 0, 0, 0, 0, 0, 1,  // INVADER
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      0, 1, 0, 1, 1, 0, 1, 0,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      0, 0, 1, 0, 0, 1, 0, 0,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      };
const uint8_t PROGMEM Warning[] =    {0, 0, 0, 1, 0, 0, 0, 0,  // WARNING
                                      0, 0, 1, 1, 1, 0, 0, 0,
                                      0, 1, 1, 0, 1, 1, 0, 0,
                                      1, 1, 1, 0, 1, 1, 1, 0,
                                      1, 1, 1, 0, 1, 1, 1, 0,
                                      0, 1, 1, 1, 1, 1, 0, 0,
                                      0, 0, 1, 0, 1, 0, 0, 0,
                                      0, 0, 0, 1, 0, 0, 0, 0,
                                      };
const uint8_t PROGMEM Smiley[] =     {0, 0, 1, 1, 1, 1, 0, 0,  // SMILEY
                                      0, 1, 1, 1, 1, 1, 1, 0,
                                      1, 1, 0, 1, 1, 0, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 1, 1, 1, 1, 1, 1, 1,
                                      1, 0, 1, 1, 1, 1, 0, 1,
                                      0, 1, 0, 0, 0, 0, 1, 0,
                                      0, 0, 1, 1, 1, 1, 0, 0,
                                      };

//  CCCCCC  OOOOO   L        OOOOOO   U    U   RRRRR    SSSSSS    !!
//  C       O   O   L        O    O   U    U   R    R   S         !!
//  C       O   O   L        O    O   U    U   RRRR     SSSSSS    !!
//  C       O   O   L        O    O   U    U   R   R         S  
//  CCCCCC  OOOOO   LLLLLLL  OOOOOO   UUUUUU   R    R   SSSSSS    !!


// WARNING!!!! UNDER NO CIRCUMSTANCES WHATSOEVER SHOULD YOU SET ANY COLOR WITH A VALUE GREATER THAN #30
// OF #20 IF MIXING THE PRIMARIES. THE DOTSTAR CAN DRAW MULTIPLE AMPS OF CURRENT AND IF YOU SET THE
// ENTIRE MATRIX TO SHOW #FFFFFF IT -WILL- CAUSE THE BOARD REGULATOR (RATED 500 MILLIAMPS) TO FAIL AND
// THAT'S THE BEST CASE SCENARIO. YOU HAVE BEEN WARNED.

/*

       /$$                    /$$ /$$           /$$       /$$                                                  
      | $$                   | $/| $$          | $$      | $$                                                  
  /$$$$$$$  /$$$$$$  /$$$$$$$|_//$$$$$$        | $$$$$$$ | $$  /$$$$$$  /$$  /$$  /$$       /$$   /$$  /$$$$$$ 
 /$$__  $$ /$$__  $$| $$__  $$ |_  $$_/        | $$__  $$| $$ /$$__  $$| $$ | $$ | $$      | $$  | $$ /$$__  $$
| $$  | $$| $$  \ $$| $$  \ $$   | $$          | $$  \ $$| $$| $$  \ $$| $$ | $$ | $$      | $$  | $$| $$  \ $$
| $$  | $$| $$  | $$| $$  | $$   | $$ /$$      | $$  | $$| $$| $$  | $$| $$ | $$ | $$      | $$  | $$| $$  | $$
|  $$$$$$$|  $$$$$$/| $$  | $$   |  $$$$/      | $$$$$$$/| $$|  $$$$$$/|  $$$$$/$$$$/      |  $$$$$$/| $$$$$$$/
 \_______/ \______/ |__/  |__/    \___/        |_______/ |__/ \______/  \_____/\___/        \______/ | $$____/ 
                                                                                                     | $$      
                                                                                                     | $$      
                                                                                                     |__/      

   /$$     /$$                                                 /$$               /$$           /$$
  | $$    | $$                                                | $$              |__/          | $$
 /$$$$$$  | $$$$$$$   /$$$$$$        /$$$$$$/$$$$   /$$$$$$  /$$$$$$    /$$$$$$  /$$ /$$   /$$| $$
|_  $$_/  | $$__  $$ /$$__  $$      | $$_  $$_  $$ |____  $$|_  $$_/   /$$__  $$| $$|  $$ /$$/| $$
  | $$    | $$  \ $$| $$$$$$$$      | $$ \ $$ \ $$  /$$$$$$$  | $$    | $$  \__/| $$ \  $$$$/ |__/
  | $$ /$$| $$  | $$| $$_____/      | $$ | $$ | $$ /$$__  $$  | $$ /$$| $$      | $$  >$$  $$     
  |  $$$$/| $$  | $$|  $$$$$$$      | $$ | $$ | $$|  $$$$$$$  |  $$$$/| $$      | $$ /$$/\  $$ /$$
   \___/  |__/  |__/ \_______/      |__/ |__/ |__/ \_______/   \___/  |__/      |__/|__/  \__/|__/
                                                                                                  
                                                                                                  


*/
                                           
// ORDER OF COLORS IS GREEN - RED - BLUE
uint32_t colorred      = 0x001000;      
uint32_t colororange   = 0x091000;      
uint32_t coloryellow   = 0x101000;      
uint32_t colorgreen    = 0x100000;      
uint32_t colorblue     = 0x000020;
uint32_t colorcyan     = 0x101020;       
uint32_t colorpurple   = 0x000A0A;      
uint32_t colorgray     = 0x101010;      
uint32_t colorpink     = 0x090F09;
      
uint32_t colortext     = 0x101010;    

// WARNING!!!! UNDER NO CIRCUMSTANCES WHATSOEVER SHOULD YOU SET ANY COLOR WITH A VALUE GREATER THAN #30
// OR #20 IF MIXING PRIMARY COLORS. THE DOTSTAR CAN DRAW MULTIPLE AMPS OF CURRENT AND IF YOU SET THE
// ENTIRE MATRIX TO SHOW #FFFFFF IT -WILL- CAUSE THE BOARD REGULATOR (RATED 500 MILLIAMPS) TO FAIL AND
// THAT'S THE BEST CASE SCENARIO. YOU HAVE BEEN WARNED.      


void loop() {
if (tested == 0)
{
for(int i=0; i<sizeof(StatusOK); i) {                     
    byte coltest = (pgm_read_byte(&StatusOK[i]));
    if (coltest == 1) strip.setPixelColor(i, 0x202020);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
strip.show();
delay(1000);
for(int i=0; i<sizeof(StatusOK); i) {                     
    byte coltest = (pgm_read_byte(&StatusOK[i]));
    if (coltest == 0) strip.setPixelColor(i, 0x202020);
    else if (coltest == 1) strip.setPixelColor(i, 0);
    i++;
  };
strip.show();
delay(1000);
strip.fill(0x000000, 0, 64);
strip.show();
tested = 1;
delay(250);
}
else;
if (emote == 0){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&PrideFlag[i]));
    if (coltest == 6) strip.setPixelColor(i, colorpurple);
    if (coltest == 5) strip.setPixelColor(i, colorblue);
    if (coltest == 4) strip.setPixelColor(i, colorgreen);
    if (coltest == 3) strip.setPixelColor(i, coloryellow);
    if (coltest == 2) strip.setPixelColor(i, colororange);
    if (coltest == 1) strip.setPixelColor(i, colorred);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 1){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&TransFlag[i]));
    if (coltest == 1) strip.setPixelColor(i, colorcyan);
    if (coltest == 2) strip.setPixelColor(i, colorpink);
    if (coltest == 3) strip.setPixelColor(i, colorgray);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 2){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatLowest[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 3){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatLow[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colororange);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 4){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatMid[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, coloryellow);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 5){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatHigh[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 6){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatFull[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, 0x1A0101);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 7){   
brokenloop = 0;      
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatLowest[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  int i = 0;
  while(true){
      delay(10);
      i++;
      if (brokenloop == 1) break;
      if (i == 50) break;
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        break;
        }
    }
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatLow[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colororange);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  i = 0;
  while(true){
      delay(10);
      i++;
      if (brokenloop == 1) break;
      if (i == 50) break;
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        break;
        }
    }
   for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatMid[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, coloryellow);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  i = 0;
  while(true){
      delay(10);
      i++;
      if (brokenloop == 1) break;
      if (i == 50) break;
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        break;
        }
    }
   for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatHigh[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  i = 0;
  while(true){
      delay(10);
      i++;
      if (brokenloop == 1) break;
      if (i == 50) break;
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        break;
        }
    }
   for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&BatFull[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, 0x1A0101);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  i = 0;
  while(true){
      delay(10);
      i++;
      if (brokenloop == 1) break;
      if (i == 50) break;
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        break;
        }
    }   
  }  
if (emote == 8){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Droplet[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    if (coltest == 2) strip.setPixelColor(i, colorgray);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 9){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Grin[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 10){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Heart[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 11){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&HiThere[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 12){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Power[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 13){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Question[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 14){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&OhOh[i]));
    if (coltest == 1) strip.setPixelColor(i, colorblue);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 15){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Ghost[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgray);
    if (coltest == 2) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 16){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Grin[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 17){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Smile[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 18){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Heart[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 19){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&HiThere[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 20){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&LowSmile[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgreen);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 21){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Padlock[i]));
    if (coltest == 1) strip.setPixelColor(i, coloryellow);
    if (coltest == 2) strip.setPixelColor(i, colorgray);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 22){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&XEyes[i]));
    if (coltest == 1) strip.setPixelColor(i, colororange);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 23){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Exclaim[i]));
    if (coltest == 1) strip.setPixelColor(i, colororange);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 24){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&SadFace[i]));
    if (coltest == 1) strip.setPixelColor(i, colororange);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 25){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&PacMan[i]));
    if (coltest == 1) strip.setPixelColor(i, coloryellow);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 26){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&PokeBall[i]));
    if (coltest == 1) strip.setPixelColor(i, colorgray);
    if (coltest == 2) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 27){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Flower[i]));
    if (coltest == 1) strip.setPixelColor(i, colorpurple);
    if (coltest == 2) strip.setPixelColor(i, coloryellow);
    if (coltest == 3) strip.setPixelColor(i, colorgreen);
    if (coltest == 4) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 28){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Heart[i]));
    if (coltest == 1) strip.setPixelColor(i, colorpurple);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 29){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Spiral[i]));
    if (coltest == 1) strip.setPixelColor(i, colorpurple);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 30){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Rainbow[i]));
    if (coltest == 1) strip.setPixelColor(i, colorpurple);
    if (coltest == 2) strip.setPixelColor(i, colorblue);
    if (coltest == 3) strip.setPixelColor(i, colorgreen);
    if (coltest == 4) strip.setPixelColor(i, coloryellow);
    if (coltest == 5) strip.setPixelColor(i, colororange);
    if (coltest == 6) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 31){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Grin[i]));
    if (coltest == 1) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 32){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Heart[i]));
    if (coltest == 1) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 33){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&HiThere[i]));
    if (coltest == 1) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 34){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Power[i]));
    if (coltest == 1) strip.setPixelColor(i, colorred);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 35){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Invader[i]));
    if (coltest == 1) strip.setPixelColor(i, colorcyan);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 36){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Warning[i]));
    if (coltest == 1) strip.setPixelColor(i, coloryellow);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}
if (emote == 37){                 
  for(int i=0; i<sizeof(Blank); i) {                     
    byte coltest = (pgm_read_byte(&Smiley[i]));
    if (coltest == 1) strip.setPixelColor(i, coloryellow);
    else if (coltest == 0) strip.setPixelColor(i, 0);
    i++;
  };
  strip.show();
  delay(80);
}

// TEXT EMOTES BELOW

if (emote == 38){
  colortext  = 0x200000;
  brokenloop = 0;  
  IsText = 1;
  char PROGMEM TextOne[] = {"EXAMPLE TEXT HERE "};
  TextHandleSize = sizeof(TextOne);
  int i = 0;
  for(i=0; i<TextHandleSize; i){
    TextHandle[i] = TextOne[i];
    i++;
    }
}

if (emote == 39){
  colortext  = 0x000020;  
  brokenloop = 0;  
  IsText = 1;
  char PROGMEM TextTwo[] = {"LEXIS IS AWESOME  "};
  TextHandleSize = sizeof(TextTwo);
  int i = 0;
  for(i=0; i<TextHandleSize; i){
    TextHandle[i] = TextTwo[i];
    i++;
    }
}
if (emote == 40){
  colortext  = 0x200000;
  brokenloop = 0;  
  IsText = 1;
  char PROGMEM TextThree[] = {"123456789  "};
  TextHandleSize = sizeof(TextThree);
  int i = 0;
  for(i=0; i<TextHandleSize; i){
    TextHandle[i] = TextThree[i];
    i++;
    }
}
if (emote == 41){
  colortext  = 0x000020;
  brokenloop = 0;  
  IsText = 1;
  char PROGMEM TextFour[] = {"EXAMPLE TEXT 4  "};
  TextHandleSize = sizeof(TextFour);
  int i = 0;
  for(i=0; i<TextHandleSize; i){
    TextHandle[i] = TextFour[i];
    i++;
    }
}

// START OF TEXT HANDLER, DO NOT EDIT BELOW THIS LINE
/*
             /$$                        
            | $$                        
  /$$$$$$$ /$$$$$$    /$$$$$$   /$$$$$$ 
 /$$_____/|_  $$_/   /$$__  $$ /$$__  $$
|  $$$$$$   | $$    | $$  \ $$| $$  \ $$
 \____  $$  | $$ /$$| $$  | $$| $$  | $$
 /$$$$$$$/  |  $$$$/|  $$$$$$/| $$$$$$$/
|_______/    \___/   \______/ | $$____/ 
                              | $$      
                              | $$      
                              |__/  
*/
// START OF TEXT HANDLER, DO NOT EDIT BELOW THIS LINE

if (IsText == 1){                      
for(int y=0; y<TextHandleSize; y) {                     
    char CharSelect = TextHandle[y];
        if (CharSelect == 'A'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterA[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };
          
        if (CharSelect == 'B'){ 
          for(int i=0; i<sizeof(LetterB); i) {                     
          byte coltest = (pgm_read_byte(&LetterB[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };
          
        if (CharSelect == 'C'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterC[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };
          
        if (CharSelect == 'D'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterD[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };
          
        if (CharSelect == 'E'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterE[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'F'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterF[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'G'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterG[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'H'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterH[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'I'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterI[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'J'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterJ[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'K'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterK[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'L'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterL[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'M'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterM[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'N'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterN[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'O'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterO[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'P'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterP[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'Q'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterQ[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'R'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterR[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'S'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterS[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
        };

        if (CharSelect == 'T'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterT[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'U'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterU[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'V'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterV[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'W'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterW[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'X'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterX[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'Y'){ 
          for(int i=0; i<sizeof(LetterA); i) {                     
          byte coltest = (pgm_read_byte(&LetterY[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

        if (CharSelect == 'Z'){ 
          for(int i=0; i<sizeof(LetterZ); i) {                     
          byte coltest = (pgm_read_byte(&LetterZ[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };

// NUMBERS BELOW
         
        if (CharSelect == '1'){ 
          for(int i=0; i<sizeof(Letter1); i) {                     
          byte coltest = (pgm_read_byte(&Letter1[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         }; 
        if (CharSelect == '2'){ 
          for(int i=0; i<sizeof(Letter2); i) {                     
          byte coltest = (pgm_read_byte(&Letter2[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };
        if (CharSelect == '3'){ 
          for(int i=0; i<sizeof(Letter3); i) {                     
          byte coltest = (pgm_read_byte(&Letter3[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         }; 
        if (CharSelect == '4'){ 
          for(int i=0; i<sizeof(Letter4); i) {                     
          byte coltest = (pgm_read_byte(&Letter4[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };  
        if (CharSelect == '5'){ 
          for(int i=0; i<sizeof(Letter5); i) {                     
          byte coltest = (pgm_read_byte(&Letter5[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         }; 
        if (CharSelect == '6'){ 
          for(int i=0; i<sizeof(Letter6); i) {                     
          byte coltest = (pgm_read_byte(&Letter6[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };
        if (CharSelect == '7'){ 
          for(int i=0; i<sizeof(Letter7); i) {                     
          byte coltest = (pgm_read_byte(&Letter7[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         }; 
        if (CharSelect == '8'){ 
          for(int i=0; i<sizeof(Letter8); i) {                     
          byte coltest = (pgm_read_byte(&Letter8[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         }; 
        if (CharSelect == '9'){ 
          for(int i=0; i<sizeof(Letter9); i) {                     
          byte coltest = (pgm_read_byte(&Letter9[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };
        if (CharSelect == '0'){ 
          for(int i=0; i<sizeof(Letter0); i) {                     
          byte coltest = (pgm_read_byte(&Letter0[i]));
          if (coltest == 1) strip.setPixelColor(i, colortext);
          else if (coltest == 0) strip.setPixelColor(i, 0);
          i++;
          };
         };   

// BLANK SPACE (AND I'LL WRITE YOUR NAME)
           
        if (CharSelect == ' '){ 
          for(int i=0; i<sizeof(Blank); i) {                     
          strip.setPixelColor(i, 0);
          i++;
          };
         };
   strip.show();
   int t = 0;
   while(true){
      delay(10);
      t++;
      if (brokenloop == 1) break;
      if (t == 25) break;           // Alter this to speed up or slow down the text. 10ms intervals.
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        delay(80);
        break;
      }
   }
  t = 0; 
  for(int i=0; i<sizeof(Blank); i) {                     
          strip.setPixelColor(i, 0);
          i++;
  }
  strip.show();     
  while(true){
      delay(10);
      t++;
      if (brokenloop == 1) break;
      if (t == 8) break;           // Alter this to change the blanking interval. 10ms intervals.
      if (digitalRead(2) == LOW){
        brokenloop = 1;
        delay(80);
        break;
      }
   }                
  if (brokenloop == 1){
    IsText = 0;
    brokenloop = 0;
    break;
    }
  y++;
};
}
else;

// EMOTE SWITCH BUTTON - EDIT (emote > n) WHERE n IS NUMBER OF EMOTES.
    thisState = digitalRead(2);
    if(thisState == LOW)       
    {
      unsigned int buttonHeldTime = millis();
      EEPROM.write(1,emote); 
      for(int i=0; i<sizeof(Blank); i) {                     
          strip.setPixelColor(i, 0);
          i++;
      };
      strip.show();
      delay(150);  
      
      while(true){
          if (digitalRead(2) == HIGH) break;
      }
       buttonHeldTime = millis() - buttonHeldTime;
      if(buttonHeldTime < 1000){
        emote++;
        emote = emote % 49;
      }
      else{
        emote = 0;
      }
    }
IsText = 0;
}
